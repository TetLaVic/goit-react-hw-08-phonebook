{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","pages/Contacts/ContactsPage.module.css","redux/ContactForm/ContactForm-operations.js","components/ContactForm/ContactForm.js","redux/ContactForm/ContactForm-selectors.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","pages/Contacts/ContactsPage.js"],"names":["module","exports","name","number","dispatch","actions","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","ContactForm","state","reset","setState","handleChange","event","preventDefault","currentTarget","value","currentState","updateState","handleSubmit","props","onSubmit","Form","this","className","styles","Group","controlId","Label","Control","type","email","placeholder","onChange","password","Button","variant","Component","connect","contact","operations","getFilter","contacts","filter","getContacts","createSelector","items","normalizedFilter","toLowerCase","includes","Filter","filterState","onFilterChange","inline","FormControl","selectors","filterChange","target","ContactListItem","id","onDeleteContact","ListGroup","Item","onClick","buttonListItem","ContactList","onLoad","contactsList","map","contactList","ContactsPage","Container","Row","Col","h2Header"],"mappings":"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","file":"static/js/6.6ca3d2cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__8AOCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__1Iv1y\",\"buttonListItem\":\"ContactListItem_buttonListItem__xobGd\",\"ListGroup\":\"ContactListItem_ListGroup__2Y77-\",\"Item\":\"ContactListItem_Item__2yDeu\",\"Button\":\"ContactListItem_Button__2hSbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3snTA\",\"ListGroup\":\"ContactList_ListGroup__2gA5p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h2Header\":\"ContactsPage_h2Header__1TynH\"};","import axios from 'axios';\r\nimport actions from './ContactForm-actions';\r\n\r\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('./contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error.message)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error.message)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleChange = event => {\r\n    event.preventDefault();\r\n    const { name, value } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const updateState = { [name]: value };\r\n    this.setState({ ...currentState, ...updateState });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className={styles.Form}>\r\n        <Form.Group controlId=\"formBasicName\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type=\"name\"\r\n            name=\"name\"\r\n            value={this.state.email}\r\n            placeholder=\"Enter name\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicNumber\">\r\n          <Form.Label>Number</Form.Label>\r\n          <Form.Control\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"Enter phone number\"\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Add contact\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(operations.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getItems = state => state.contacts.items;\r\n\r\n// const getContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const items = getItems(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n//   );\r\n// };\r\n\r\nconst getContacts = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n});\r\n\r\nexport default { getFilter, getContacts };\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const { filterState, onFilterChange } = this.props;\r\n    return (\r\n      <Form inline>\r\n        <FormControl\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filterState}\r\n          onChange={onFilterChange}\r\n          placeholder=\"Search\"\r\n          className=\"mr-sm-2\"\r\n        />\r\n        <Button variant=\"outline-light\">Search</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  onFilterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => {\r\n  return (\r\n    <ListGroup.Item id={id} className={styles.ListGroup.Item}>\r\n      {name}: {number}\r\n      <Button\r\n        className={styles.Button}\r\n        variant=\"outline-danger\"\r\n        onClick={() => {\r\n          onDeleteContact(id);\r\n        }}\r\n        className={styles.buttonListItem}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.onLoad();\r\n  }\r\n  render() {\r\n    const { contactsList, onDeleteContact } = this.props;\r\n    return (\r\n      <ListGroup className={styles.ListGroup}>\r\n        {contactsList.map(({ name, number, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              key={id}\r\n              id={id}\r\n              onDeleteContact={onDeleteContact}\r\n              className={styles.contactList}\r\n            />\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsList: selectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: contactId => dispatch(operations.deleteContact(contactId)),\r\n  onLoad: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport Filter from '../../components/Filter';\r\nimport ContactList from '../../components/ContactList';\r\nimport styles from './ContactsPage.module.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h2 className={styles.h2Header}>Phonebook</h2>\r\n          <ContactForm />\r\n        </Col>\r\n        <Col>\r\n          <h2 className={styles.h2Header}>Contacts</h2>\r\n          <Filter />\r\n          <ContactList />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}